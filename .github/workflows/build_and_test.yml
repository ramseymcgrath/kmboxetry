name: Generate Cynthion Bitstream

on:
  push:
    paths:
      # Trigger on changes to the Amaranth script, Rust source, or the workflow itself
      - 'src/backend/cynthion_passthrough.py' # <-- CORRECTED PATH
      - 'src/**' # Keep this as it covers Rust changes too
      - '.github/workflows/get_bitstream.yml'
      - 'Cargo.toml'
      - 'Cargo.lock'
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-bitstream:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # No submodules needed for this specific script, unless luna is a submodule

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake python3-pip python3-dev \
            libboost-all-dev libeigen3-dev zlib1g-dev libftdi1-dev \
            python3-setuptools python3-wheel \
            bc # Needed for coverage badge calculation

      - name: Setup FPGA toolchain (OSS CAD Suite)
        run: |
          # Download and extract OSS CAD Suite (adjust version date if needed)
          OSS_CAD_VERSION="20240712" # Use a recent version
          wget -O oss-cad-suite.tgz "https://github.com/YosysHQ/oss-cad-suite-build/releases/download/${OSS_CAD_VERSION}/oss-cad-suite-linux-x64-${OSS_CAD_VERSION}.tgz"
          mkdir -p oss-cad-suite
          tar -xzf oss-cad-suite.tgz -C oss-cad-suite --strip-components=1
          # Add toolchain bin directory to PATH for subsequent steps
          echo "$(pwd)/oss-cad-suite/bin" >> $GITHUB_PATH
          # Verify toolchain
          yosys --version
          nextpnr-ecp5 --version

      - name: Install Python requirements for LUNA/Amaranth
        run: |
          python3 -m pip install --upgrade pip
          # Install dependencies: Amaranth, LUNA, and potentially others LUNA might need
          python3 -m pip install setuptools wheel pyvcd pytest
          python3 -m pip install amaranth amaranth-boards
          # Install LUNA directly from GitHub (recommended way)
          python3 -m pip install git+https://github.com/greatscottgadgets/luna.git
          # Install pyserial for luna-dev runner utility (optional but useful)
          python3 -m pip install pyserial

      - name: Build Amaranth Gateware
        run: |
          echo "Building gateware using src/backend/cynthion_passthrough.py..."
          # Execute the python script using its full path from the repo root
          python3 src/backend/cynthion_passthrough.py # <-- CORRECTED PATH

          # Check if the expected output file exists in the repo root's build directory
          if [ ! -f build/gateware/top.bit ]; then
            echo "ERROR: Expected bitstream file build/gateware/top.bit was not generated."
            # List contents of build dir for debugging
            echo "Contents of ./build/gateware/:"
            ls -la build/gateware/ || echo "./build/gateware/ not found."
            exit 1
          fi
          echo "Gateware build completed successfully."

      # --- Rust Build and Test Steps (Unchanged) ---

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4 # Use latest cache action
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build Rust project (Release)
        # Check if Cargo.toml exists before trying to build
        if: hashFiles('Cargo.toml') != ''
        run: |
          echo "Building Rust project..."
          cargo build --release

      - name: Test Rust project
        # Check if Cargo.toml exists before trying to test
        if: hashFiles('Cargo.toml') != ''
        run: |
          echo "Testing Rust project..."
          # Run tests that don't depend on usb.rs (adjust modules as needed)
          # If tests require the built application, ensure it's in PATH or use relative path
          cargo test --lib inject version util || echo "Ignoring test failures for now"

      - name: Check Rust code formatting
        # Check if Cargo.toml exists before trying to format
        if: hashFiles('Cargo.toml') != ''
        run: |
          rustup component add rustfmt
          cargo fmt -- --check

      # --- Coverage Steps (Kept as is, may need adjustment if usb.rs workaround is still needed) ---
      - name: Generate code coverage (Tarpaulin)
        if: hashFiles('Cargo.toml') != ''
        run: |
          echo "Generating code coverage..."
          # Check if cargo-tarpaulin is installed, install if not
          if ! command -v cargo-tarpaulin &> /dev/null; then
            echo "Installing cargo-tarpaulin..."
            cargo install cargo-tarpaulin --version 0.27 # Pin version for stability if needed
          fi

          # Assume usb.rs might cause issues, exclude it (adjust path/name if needed)
          # Run tarpaulin on specific packages/modules if necessary
          cargo tarpaulin --out Xml --output-dir coverage --exclude-files src/usb.rs --packages packetry_injector --verbose -- --test-threads=1 || echo "Tarpaulin failed, proceeding..."

      - name: Upload coverage report artifact
        if: hashFiles('Cargo.toml') != '' && hashFiles('coverage/cobertura.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage/
          if-no-files-found: warn

      - name: Upload coverage to Codecov
        if: hashFiles('Cargo.toml') != '' && hashFiles('coverage/cobertura.xml') != ''
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/cobertura.xml
          fail_ci_if_error: false

      # --- Artifact and Release Steps (Check bitstream path unchanged) ---

      - name: Package Artifacts
        id: package
        run: |
          ARTIFACT_DIR="${{ github.workspace }}/artifacts"
          mkdir -p ${ARTIFACT_DIR}

          echo "Packaging artifacts..."
          # Copy the generated bitstream (assuming it's still in ./build/gateware/)
          if [ -f build/gateware/top.bit ]; then
            cp build/gateware/top.bit ${ARTIFACT_DIR}/cynthion_passthrough.bit
            echo "- Added cynthion_passthrough.bit"
          else
            echo "WARN: Bitstream file (build/gateware/top.bit) not found!"
          fi

          # Copy the Rust binary if it exists
          if [ -f target/release/packetry_injector ]; then
             cp target/release/packetry_injector ${ARTIFACT_DIR}/
             echo "- Added packetry_injector (Rust Binary)"
          elif ls target/release/* &> /dev/null && [[ ! -d target/release/deps ]]; then # Copy other release binaries if they exist
             find target/release -maxdepth 1 -type f -executable -exec cp {} ${ARTIFACT_DIR}/ \;
             echo "- Added other Rust release binaries"
          fi

          # List packaged files
          echo "Packaged files:"
          ls -l ${ARTIFACT_DIR}/ || echo "No files packaged."

          # Set output for artifact name
          echo "artifact_path=${ARTIFACT_DIR}" >> $GITHUB_OUTPUT

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cynthion-build-${{ github.run_number }}
          path: ${{ steps.package.outputs.artifact_path }}
          if-no-files-found: error # Fail if nothing was packaged

      - name: Generate Changelog for Release
        if: github.ref_type == 'tag'
        id: changelog
        run: |
          CHANGELOG_FILE="${{ github.workspace }}/CHANGELOG_RELEASE.md"
          echo "# Release ${{ github.ref_name }}" > ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "Automatic release generated by GitHub Action." >> ${CHANGELOG_FILE}
          echo "" >> ${CHANGELOG_FILE}
          echo "## Build Information" >> ${CHANGELOG_FILE}
          echo "- Commit: \`${{ github.sha }}\`" >> ${CHANGELOG_FILE}
          echo "- Date: $(date)" >> ${CHANGELOG_FILE}
          echo "- Built using \`src/backend/cynthion_passthrough.py\` Amaranth script." >> ${CHANGELOG_FILE} # Updated path here too
          echo "" >> ${CHANGELOG_FILE}
          echo "## Included Files" >> ${CHANGELOG_FILE}

          ARTIFACT_DIR="${{ steps.package.outputs.artifact_path }}"
          if ls ${ARTIFACT_DIR}/* &> /dev/null; then
            for file in ${ARTIFACT_DIR}/*; do
              echo "* \`$(basename "$file")\`" >> ${CHANGELOG_FILE}
            done
          else
            echo "* No files included in artifact." >> ${CHANGELOG_FILE}
          fi

          echo "" >> ${CHANGELOG_FILE}
          echo "---" >> ${CHANGELOG_FILE}
          echo "_For usage instructions, please refer to the project README._" >> ${CHANGELOG_FILE}

          cat ${CHANGELOG_FILE}
          # Set output path for release step
          echo "body_path=${CHANGELOG_FILE}" >> $GITHUB_OUTPUT


      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          body_path: ${{ steps.changelog.outputs.body_path }}
          files: ${{ steps.package.outputs.artifact_path }}/*
          fail_on_unmatched_files: true
